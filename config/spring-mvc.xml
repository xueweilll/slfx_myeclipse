<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:mvc="http://www.springframework.org/schema/mvc" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:p="http://www.springframework.org/schema/p" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:dwr="http://www.directwebremoting.org/schema/spring-dwr"
	xsi:schemaLocation="http://www.springframework.org/schema/beans 
		http://www.springframework.org/schema/beans/spring-beans-4.1.xsd 
		http://www.springframework.org/schema/context 
		http://www.springframework.org/schema/context/spring-context-4.1.xsd 
		http://www.springframework.org/schema/mvc 
		http://www.springframework.org/schema/mvc/spring-mvc-4.1.xsd
		http://www.directwebremoting.org/schema/spring-dwr
		http://www.directwebremoting.org/schema/spring-dwr-3.0.xsd">


	<mvc:default-servlet-handler />
	<!-- 启动Spring MVC的注解功能，完成请求和注解POJO的映射,解决@ResponseBody乱码问题, 需要在annotation-driven之前,否则乱码问题同样无法解决 -->
	<!-- <bean class="org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter"> 
		<property name="messageConverters"> <list> <bean class="org.springframework.http.converter.StringHttpMessageConverter"> 
		<property name="supportedMediaTypes"> <list> <value>text/html;charset=UTF-8</value> 
		</list> </property> </bean> </list> </property> </bean> -->
	<mvc:annotation-driven>
		<mvc:message-converters register-defaults="true">
			<bean class="org.springframework.http.converter.StringHttpMessageConverter">
				<property name="supportedMediaTypes" value="text/html;charset=UTF-8" />
			</bean>
		</mvc:message-converters>
	</mvc:annotation-driven>
	<mvc:resources location="/dwr/" mapping="/dwr/**" />
	<mvc:resources location="/js/" mapping="/js/**" />
	<mvc:resources location="/vedio/" mapping="/vedio/**" />
	<mvc:resources location="/css/" mapping="/css/**" />
	<mvc:resources location="/images/" mapping="/images/**" />
	<mvc:resources location="/upload/" mapping="/upload/**" />
	<mvc:resources location="/gis/" mapping="/gis/**" />
	<mvc:resources location="/jsonData/" mapping="/jsonData/**" />

	<!-- 自动扫描controller包下的所有类，如果@Controller注入为bean -->
	<context:component-scan base-package="com.benqzl.controller,com.benqzl.unit" />
	
	<!-- 扫描文件（自动将socket层注入） -->
	<context:component-scan base-package="com.benqzl.socket"/>	

	<!-- 避免IE执行AJAX时,返回JSON出现下载文件 -->
	<bean id="mappingJacksonHttpMessageConverter"
		class="org.springframework.http.converter.json.MappingJackson2HttpMessageConverter">
		<property name="supportedMediaTypes">
			<list>
				<value>text/html;charset=UTF-8</value>
			</list>
		</property>
	</bean>

	<!-- 启动Spring MVC的注解功能，完成请求和注解POJO的映射 -->
	<!-- <bean class="org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter"> 
		<property name="messageConverters"> <list> json转换器 <ref bean="mappingJacksonHttpMessageConverter" 
		/> </list> </property> </bean> -->
	<!-- <mvc:view-controller path="/" view-name="main" /> -->
	<!-- 对模型视图名称的解析，即在模型视图名称添加前后缀 -->
	<bean
		class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<!-- <property name="viewClass" value="org.springframework.web.servlet.view.JstlView" 
			/> -->
		<property name="prefix">
			<value>/WEB-INF/views/</value>
		</property>
		<property name="suffix">
			<value>.jsp</value>
		</property>
	</bean>

	<!-- 配置多文件上传 -->
	<bean id="multipartResolver"
		class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
		<property name="defaultEncoding">
			<value>UTF-8</value>
		</property>
		<property name="maxUploadSize">
			<!-- 上传文件大小限制为31M，31*1024*1024 -->
			<value>32505856</value>
		</property>
		<property name="maxInMemorySize">
			<value>4096</value>
		</property>
	</bean>
	<!-- 配置DWR -->
	<dwr:configuration />
	<dwr:annotation-config />
	<dwr:url-mapping />
	<dwr:annotation-scan base-package="com.benqzl.unit"
		scanDataTransferObject="true" scanRemoteProxy="true" />
	<!-- 部署项目时, 请把debug设为false -->
	<dwr:controller id="dwrController" debug="true">
		<dwr:config-param name="allowScriptTagRemoting"
			value="true" />
		<dwr:config-param name="crossDomainSessionSecurity"
			value="true" />
		<dwr:config-param name="org.directwebremoting.extend.Remoter"
			value="com.benqzl.core.dwr.DWRSessionService" />
		<dwr:config-param name="classes" value="java.lang.Object" />
		<dwr:config-param name="activeReverseAjaxEnabled"
			value="true" />
		<!-- script session 的超时设置 默认值： 1800000(30 分钟 ) -->
		<dwr:config-param name="scriptSessionTimeout" value="3600000" />
		<dwr:config-param name="initApplicationScopeCreatorsAtStartup"
			value="true" />
		<dwr:config-param name="org.directwebremoting.extend.ScriptSessionManager"
			value="com.benqzl.core.dwr.DWRScriptSessionManager" />
	</dwr:controller>
	<!-- order值越小, 优先级越高 -->
	<bean
		class="org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping">
		<property name="order" value="1" />
	</bean>
	<bean
		class="org.springframework.web.servlet.handler.BeanNameUrlHandlerMapping">
		<property name="order" value="2" />
	</bean>

	<bean class="org.springframework.web.servlet.handler.SimpleUrlHandlerMapping">
		<property name="order" value="3" />
		<property value="true" name="alwaysUseFullPath"></property>
		<property name="mappings">
			<props>
				<prop key="/dwr/**">dwrController</prop>
			</props>
		</property>
	</bean>


	<!-- 定义目标bean和bean中的方法 -->
	<bean id="SpringQtzJob" class="com.benqzl.core.QuartzByPringMvc" />
    <bean id="rainQuartz" class="com.benqzl.core.RainQuartz"/>
	<bean id="SpringQtzJobMethod"
		class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean">
		<property name="targetObject">
			<ref bean="SpringQtzJob" />
		</property>
		<property name="targetMethod">
			<!-- 要执行的方法名称-->
			<value>execute</value>
		</property>
	</bean>
	 <bean id="rainQuartzTask" class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean">
        <property name="targetObject">
            <ref bean="rainQuartz"/><!-- 调用的Job类 -->
        </property>
        <property name="targetMethod">
            <value>run</value><!-- 调用的类中的方法 -->
        </property>
    </bean>
     <bean id="procedureQuartzTask" class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean">
        <property name="targetObject">
            <ref bean="SpringQtzJob"/><!-- 调用的Job类 -->
        </property>
        <property name="targetMethod">
            <value>procedureQuartz</value><!-- 调用的类中的方法 -->
        </property>
    </bean>
    

	<!--======================== 调度触发器 ======================== -->
	<bean id="CronTriggerBean"
		class="org.springframework.scheduling.quartz.CronTriggerFactoryBean">
		<property name="jobDetail" ref="SpringQtzJobMethod"></property>
		<!-- 每隔10秒执行一次-->
		<property name="cronExpression" value="0 0 1 1 * ?"></property>
	</bean>
	 <bean id="RainQuartzTime" class="org.springframework.scheduling.quartz.CronTriggerFactoryBean">
        <property name="jobDetail">
            <ref bean="rainQuartzTask"/>
        </property>
        <property name="cronExpression">
        	<!-- 每天23点59分59秒 -->
            <value>59 59 23 * * ?</value>
        </property>
    </bean>
     <bean id="ProcedureQuartzTime" class="org.springframework.scheduling.quartz.CronTriggerFactoryBean">
        <property name="jobDetail">
            <ref bean="procedureQuartzTask"/>
        </property>
        <property name="cronExpression">
        	<!-- =======每年12月31日23点59分59秒将序列重置 -->
            <value>59 59 23 31 12 ? *</value>
        </property>
    </bean>

	<!--======================== 调度工厂 ======================== -->
	<bean id="SpringJobSchedulerFactoryBean" lazy-init="false"
		class="org.springframework.scheduling.quartz.SchedulerFactoryBean">
		<property name="triggers">
			<list>
				<ref bean="CronTriggerBean" />
				<ref bean="RainQuartzTime"/>
				<ref bean="ProcedureQuartzTime"/>
			</list>
		</property>
	</bean>

	<mvc:interceptors>
		<mvc:interceptor>
			<mvc:mapping path="/**" />
			<bean class="com.benqzl.core.interceptor.PermissionHandler"></bean>
		</mvc:interceptor>
	</mvc:interceptors>
	<bean class="com.benqzl.core.InstantiationTracingBeanPostProcessor"/>
</beans>